# ------global variables-----
import turtle

# Game board
def heart():
    niloy_turtle = turtle.Turtle()


    def curve():
        for i in range(200):
            niloy_turtle.right(1)
            niloy_turtle.forward(1)

    niloy_turtle.left(140)
    niloy_turtle.forward(111.65)
    curve()

    niloy_turtle.left(120)
    curve()
    niloy_turtle.forward(111.65)
heart()



board = ["-", "-", "-",
         "-", "-", "-",
         "-", "-", "-", ]
# game still going
game_still_going = True

# who won?or tie?
winner = None
# whos turn is it
current_player = "X"


def display_board():
    print(board[0] + " | " + board[1] + " | " + board[2])
    print(board[3] + " | " + board[4] + " | " + board[5])
    print(board[6] + " | " + board[7] + " | " + board[8])


def play_game():
    display_board()

    while game_still_going:
        handle_turn(current_player)
        # check the game ended
        check_if_game_over()
        # flip to other player
        flip_player()
    if winner == "X" or winner == "O":
        print(winner + " won. ")
        heart()
    elif winner == None:
        print("Tie.")





def handle_turn(player):
    print(player + "'s turn.")
    position = input("Choose a position from 1-9:")
    valid=False
    while not valid:
        while position not in ["1", "2", "3", "4", "5", "6","7", "8", "9"]:
            position = input("Invalid input.Choose a position from 1-9:")

        position = int(position) - 1
        if board[position] == "-":
            valid=True
        else:
            print("You can't go there.Go again.")
    board[position] = player
    display_board()


def check_if_game_over():
    check_if_win()
    check_if_tie()


def check_rows():
    global game_still_going
    row_1 = board[0] == board[1] == board[2] != "-"
    row_2 = board[3] == board[4] == board[5] != "-"
    row_3 = board[6] == board[7] == board[8] != "-"
    # if any roe has a match there is a win
    if row_1 or row_2 or row_3:
        game_still_going = False
    if row_1:
        return board[0]
    elif row_2:
        return board[3]
    elif row_3:
        return board[6]

    return


def check_columns():
    global game_still_going

    column_1 = board[0] == board[3] == board[6] != "-"
    column_2 = board[1] == board[4] == board[7] != "-"
    column_3 = board[2] == board[5] == board[8] != "-"
    # if any roe has a match there is a win
    if column_1 or column_2 or column_3:
        game_still_going = False

    if column_1:
        return board[0]
    elif column_2:
        return board[1]
    elif column_3:
        return board[2]
    return


def check_diagonals():
    global game_still_going
    diagonals_1 = board[0] == board[4] == board[8] != "-"
    diagonals_2 = board[6] == board[4] == board[2] != "-"

    # if any roe has a match there is a win
    if diagonals_1 or diagonals_2:
        game_still_going = False
    if diagonals_1:
        return board[0]
    elif diagonals_2:
        return board[6]

    return


def check_if_win():
    global winner
    row_winner = check_rows()
    column_winner = check_columns()
    diagonal_winner = check_diagonals()
    if row_winner:
        # there was a winner
        winner = row_winner
    elif column_winner:

        # there was a winner
        winner = column_winner
    elif diagonal_winner:
        # there was a winner
        winner = diagonal_winner
    else:
        # there is no win
        winner = None
    return

    return


def check_if_tie():
    global game_still_going
    if "-" not in board:
        game_still_going = False
    return


def flip_player():
    global current_player
    # if the current player is x then change it  in o
    if current_player == "X":
        current_player = "O"
    # if the currenrt player is o then change it in x
    elif current_player == "O":
        current_player = "X"

    return



play_game()


